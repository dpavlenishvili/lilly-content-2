// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

import { Asset, Entry } from 'contentful';
import { Document } from '@contentful/rich-text-types';

export interface IAboutBlogFields {
  /** Title */
  title: string;

  /** Body */
  body: string;

  /** Featured Authors */
  featuredAuthors?: IAuthor[] | undefined;
}

/** The "About" Page for the Lilly Trials Blog. This features a brief description and an author bio for selected Author references */

export interface IAboutBlog extends Entry<IAboutBlogFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'aboutBlog';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IAccordionWidgetFields {
  /** Key */
  key: string;

  /** Summary */
  summary: string;

  /** Body */
  body: string;
}

/** Widget that creates an accordion section with a heading, subheading, and body */

export interface IAccordionWidget extends Entry<IAccordionWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'accordionWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IAlertMeWidgetFields {
  /** Key */
  key: string;

  /** Summary */
  summary: string;

  /** Content */
  content: string;

  /** Content Mobile */
  contentMobile?: string | undefined;

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Button Text */
  buttonText: string;
}

/** Widget that renders an alertme banner and controls various aspects of the alertme form */

export interface IAlertMeWidget extends Entry<IAlertMeWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'alertMeWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IArticleFields {
  /** Title */
  title: string;

  /** Slug */
  slug: string;

  /** Pinned */
  pinned?: boolean | undefined;

  /** Hero Image */
  heroImage: Asset;

  /** Alt Text */
  altText?: string | undefined;

  /** Author */
  author: IAuthor;

  /** Summary */
  summary: string;

  /** Read Time */
  readTime?: string | undefined;

  /** Body */
  body: string;

  /** Publish Date */
  publishDate: string;

  /** Revised Date */
  revisedDate?: string | undefined;

  /** Popularity */
  popularity?: IPopularity | undefined;

  /** Category */
  category?: IArticleCategory[] | undefined;

  /** Tags */
  tags?: string[] | undefined;

  /** Archived */
  archived: boolean;

  /** Languages */
  languages: (
    | 'en-US'
    | 'en-GB'
    | 'de-DE'
    | 'ja-JP'
    | 'pl-PL'
    | 'es-AR'
    | 'es-MX'
    | 'es-ES'
    | 'es-US'
    | 'it-IT'
    | 'pt-BR'
    | 'en-CA'
    | 'fr-CA'
    | 'en-AU'
  )[];

  /** Sections */
  sections?: ISection[] | undefined;

  /** Nav Elements */
  navElements?: ISection[] | undefined;

  /** Position of Nav Elements */
  positionNavElements?: 'Center' | 'Left' | 'Right' | undefined;
}

/** An article is the featured content in the Lilly Trials Blog. Each article is unique and will have its own unique URL based on the "slug" field */

export interface IArticle extends Entry<IArticleFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'article';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IArticleCategoryFields {
  /** Title */
  title: string;

  /** Slug */
  slug: string;

  /** Description */
  description: string;
}

/** Blog category.  Allows users to find a blog article that is directly linked to a SINGLE category */

export interface IArticleCategory extends Entry<IArticleCategoryFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'articleCategory';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IAuthorFields {
  /** Name */
  name: string;

  /** Slug */
  slug: string;

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Bio */
  bio: string;
}

/** Author of a Blog Article */

export interface IAuthor extends Entry<IAuthorFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'author';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IBlockquoteWidgetFields {
  /** Key */
  key: string;

  /** Author */
  author?: string | undefined;

  /** Quote */
  quote?: string | undefined;

  /** Source */
  source?: string | undefined;
}

export interface IBlockquoteWidget extends Entry<IBlockquoteWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'blockquoteWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IBlogSettingsFields {
  /** Title Tag */
  titleTag: string;

  /** Description */
  description?: string | undefined;

  /** Languages */
  languages: (
    | 'en-US'
    | 'en-CA'
    | 'en-GB'
    | 'de-DE'
    | 'ja-JP'
    | 'pl-PL'
    | 'es-AR'
    | 'es-MX'
    | 'es-ES'
    | 'es-US'
    | 'it-IT'
    | 'pt-BR'
    | 'fr-CA'
    | 'en-AU'
  )[];

  /** Category Navigation */
  categoryNavigation?: IArticleCategory[] | undefined;

  /** Author Dedicated Page */
  authorDedicatedPage: IAuthor[];

  /** Page Meta And Share */
  pageMetaAndShare?: IMetaAndShare[] | undefined;
}

/** Configure some default behavior for the LTG Blog subsite */

export interface IBlogSettings extends Entry<IBlogSettingsFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'blogSettings';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IBmiCalculatorWidgetFields {
  /** Title */
  title: string;

  /** Description of Calculator */
  calculatorDescription?: string | undefined;

  /** Description of Result */
  resultDescription?: string | undefined;

  /** Imperial Unit Caption */
  imperialUnitCaption: string;

  /** Metric Unit Caption */
  metricUnitCaption: string;

  /** Default Unit */
  defaultUnit: 'imperial' | 'metric';

  /** BMI Result Status */
  bmiResultStatus: IBmiResultStatus[];
}

/** Widget that calculate BMI */

export interface IBmiCalculatorWidget
  extends Entry<IBmiCalculatorWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'bmiCalculatorWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IBmiResultStatusFields {
  /** Range From */
  rangeFrom: number;

  /** Range To */
  rangeTo: number;

  /** Range Caption */
  rangeCaption: string;

  /** Status Title */
  statusTitle: string;
}

/** BMI calculator result table */

export interface IBmiResultStatus extends Entry<IBmiResultStatusFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'bmiResultStatus';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ICardArrangementWidgetFields {
  /** Key */
  key: string;

  /** Cards */
  cards: ICardWidget[];

  /** Max Visible Cards */
  maxVisibleCards?: number | undefined;

  /** hideIfNoTrials */
  hideIfNoTrials?: boolean | undefined;
}

/** Widget to display multiple cards in a row or column */

export interface ICardArrangementWidget
  extends Entry<ICardArrangementWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'cardArrangementWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ICardWidgetFields {
  /** Key */
  key: string;

  /** Summary */
  summary: string;

  /** Flip Front Content */
  flipFrontContent?: string | undefined;

  /** Main Content */
  content?: string | undefined;

  /** Main Content - Mobile */
  contentMobile?: string | undefined;

  /** Show Summary in Mobile Version */
  showSummaryInMobile: boolean;

  /** Display Media */
  displayMedia: 'Image' | 'Video' | 'KalturaId' | 'YoutubeId' | 'SpotifyId';

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Aria Hidden */
  ariaHidden?: boolean | undefined;

  /** Use image as icon */
  useImageAsIcon?: boolean | undefined;

  /** Video Url */
  videoUrl?: string | undefined;

  /** Kaltura Id */
  cardVideoId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;

  /** Spotify ID */
  spotifyId?: string | undefined;

  /** Spotify background color */
  spotifyBackgroundColor?: string | undefined;

  /** Orientation */
  orientation:
    | 'horizontal'
    | 'vertical'
    | 'horizontal-reverse'
    | 'vertical-reverse';

  /** Max Image Width */
  maxImageWidth?: number | undefined;

  /** Flippable */
  flippable: boolean;

  /** Flip Button Text */
  flipButtonText?: string | undefined;

  /** Link Aria Label */
  linkAriaLabel?: string | undefined;

  /** Button Text */
  buttonText?: string | undefined;

  /** Button Link */
  buttonLink?: string | undefined;

  /** Link Behavior */
  linkBehavior?:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration'
    | undefined;

  /** Action Display Type */
  actionDisplayType?: 'button' | 'link' | undefined;
}

/** Widget to display a card with a picture */

export interface ICardWidget extends Entry<ICardWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'cardWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IClinicalTrialEssentialFields {
  /** Title */
  title: string;

  /** Text */
  text: string;

  /** Icon */
  icon?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;
}

/** Individual card for the Clinical Trial Essentials Widget (Privacy, Information, Questions, Participation) */

export interface IClinicalTrialEssential
  extends Entry<IClinicalTrialEssentialFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'clinicalTrialEssential';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IClinicalTrialEssentialsWidgetFields {
  /** Key */
  key: string;

  /** Clinical Trial Essentials Fields */
  clinicalTrialEssentialsFields: IClinicalTrialEssential[];
}

/** Widget that displays Essentials of Clinical Trial Section in a grid layout with icons and descriptions */

export interface IClinicalTrialEssentialsWidget
  extends Entry<IClinicalTrialEssentialsWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'clinicalTrialEssentialsWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IContentTileFields {
  /** Unique Key */
  key: string;

  /** Heading */
  heading?: string | undefined;

  /** Subheading */
  subheading?: string | undefined;

  /** Body */
  body?: Document | undefined;

  /** Asset */
  asset?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;
}

/** Content tile with heading, body text and an asset */

export interface IContentTile extends Entry<IContentTileFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'contentTile';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ICtmUtmSourcesFields {
  /** Trial ID */
  trialId: string;

  /** Sources */
  sources: string[];
}

/** CTM UTM Sources per trial */

export interface ICtmUtmSources extends Entry<ICtmUtmSourcesFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'ctmUtmSources';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IFaqPageFields {
  /** Entry Name */
  entryName: string;

  /** Main Title */
  mainTitle: string;

  /** Description */
  description: string;

  /** Image URL */
  imageUrl?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;
}

export interface IFaqPage extends Entry<IFaqPageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'faqPage';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IFindTrialWidgetFields {
  /** Key */
  key: string;

  /** Summary */
  summary: string;

  /** Content */
  content: string;

  /** Content Mobile */
  contentMobile?: string | undefined;

  /** Button Text */
  buttonText: string;

  /** Button Link */
  buttonLink?: string | undefined;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';
}

/** Widget that renders a find trial banner */

export interface IFindTrialWidget extends Entry<IFindTrialWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'findTrialWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHeaderMenuFields {
  /** Key */
  key: string;

  /** Menu */
  menu: (IPageLink | IPageLinkList)[];
}

/** The list of Page Links which we want to show in the app header */

export interface IHeaderMenu extends Entry<IHeaderMenuFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'headerMenu';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHomePageFindWidgetFields {
  /** Key */
  key: string;
}

/** This widget includes the homepage filters that leads to search results page. */

export interface IHomePageFindWidget extends Entry<IHomePageFindWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'homePageFindWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHomeResearchAreaContentFields {
  /** Title */
  title: string;

  /** Description */
  description?: string | undefined;

  /** Button Text */
  buttonText?: string | undefined;

  /** Button Link */
  buttonLink?: string | undefined;

  /** Image */
  image?: Asset | undefined;

  /** Image Alt Text */
  imageAltText?: string | undefined;

  /** Icon */
  icon: Asset;

  /** Icon Alt Text */
  iconAltText?: string | undefined;

  /** Condition */
  condition?: ITrialCondition[] | undefined;

  /** Button Visible */
  buttonVisible?: boolean | undefined;
}

export interface IHomeResearchAreaContent
  extends Entry<IHomeResearchAreaContentFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'homeResearchAreaContent';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHomeResearchAreasFields {
  /** Key */
  key: string;

  /** Main Title */
  mainTitle: string;

  /** Sub Title */
  subTitle: string;

  /** Mobile Dropdown Label */
  mobileDropdownLabel: string;

  /** Menu */
  menu?: IHomeResearchAreaContent[] | undefined;
}

export interface IHomeResearchAreas extends Entry<IHomeResearchAreasFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'homeResearchAreas';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IImageAssetFields {
  /** Key */
  key: string;

  /** Image */
  image: Asset;

  /** Alt text */
  altText?: string | undefined;
}

export interface IImageAsset extends Entry<IImageAssetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'imageAsset';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IImageLinkWidgetFields {
  /** Name */
  name: string;

  /** Image */
  image: Asset;

  /** Alt Text */
  altText?: string | undefined;

  /** URL */
  url: string;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';
}

/** Widget that creates a clickable image link */

export interface IImageLinkWidget extends Entry<IImageLinkWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'imageLinkWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IImageTileWidgetFields {
  /** Heading */
  heading: string;

  /** Description */
  description: string;

  /** Display Media */
  displayMedia: 'Image' | 'Video' | 'KalturaId' | 'YoutubeId' | 'SpotifyId';

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Video URL */
  videoUrl?: string | undefined;

  /** Kaltura id */
  kalturaId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;

  /** Spotify Id */
  spotifyId?: string | undefined;

  /** Button Text */
  buttonText: string;

  /** URL */
  url: string;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';

  /** Link Aria Label */
  linkAriaLabel?: string | undefined;

  /** Hide Button */
  hideButton?: boolean | undefined;
}

/** Widget that displays an image with a title, description, and link. Successive uses of this widget start with the image on the left for the first widget and then alternate layout orientations. */

export interface IImageTileWidget extends Entry<IImageTileWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'imageTileWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IKalturaUiConfigFields {
  /** Entry Name */
  entryName: string;

  /** Id */
  id: string;
}

export interface IKalturaUiConfig extends Entry<IKalturaUiConfigFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'kalturaUiConfig';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ILinkFields {
  /** Unique Key */
  key: string;

  /** Text */
  text: string;

  /** URL */
  url: string;

  /** Link Behavior */
  linkBehavior: 'sameTab' | 'newTab';
}

/** A link to a url */

export interface ILink extends Entry<ILinkFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'link';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IMetaAndShareFields {
  /** Entry Name */
  entryName: string;

  /** Page Id */
  pageId?: string | undefined;

  /** Meta Title */
  metaTitle: string;

  /** Meta Description */
  metaDescription?: string | undefined;

  /** Meta Keywords */
  metaKeywords?: string[] | undefined;

  /** OG Image */
  ogImage?: Asset | undefined;
}

/** Metadata and Share content at the page level */

export interface IMetaAndShare extends Entry<IMetaAndShareFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'metaAndShare';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IModifierFields {
  /** Partner Code */
  partnerCode?: string | undefined;

  /** Id */
  id: string;

  /** Name */
  name: string;

  /** Disease Id */
  diseaseId?: string | undefined;

  /** Sub Disease Id */
  subDiseaseId?: string | undefined;
}

/** Modifire / Diagnosis */

export interface IModifier extends Entry<IModifierFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'modifier';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IPageFields {
  /** Entry Name */
  entryName: string;

  /** Page Link */
  pageLink: IPageLink;

  /** Page Media */
  pageMedia?: IPageMedia | undefined;

  /** Main Title */
  mainTitle: string;

  /** Conditions Title */
  conditionsTitle: string;

  /** Conditions */
  conditions: string[];

  /** Intro */
  intro: string;

  /** Description */
  description: string;

  /** Display Media */
  displayMedia: 'Image' | 'Video' | 'KalturaId' | 'YoutubeId';

  /** Image URL */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Video URL */
  video?: string | undefined;

  /** Kaltura Id */
  kalturaId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;

  /** Primary Color */
  primaryColor: string;

  /** Sections */
  sections: ISection[];

  /** Metadata */
  metadata: IMetaAndShare;

  /** Nav Elements */
  navElements: ISection[];

  /** Position of Nav Elements */
  positionNavElements?: 'Center' | 'Left' | 'Right' | undefined;

  /** Back To Top */
  backToTop: boolean;

  /** Back To Top Text */
  backToTopText?: string | undefined;

  /** Trial Conditions */
  trialConditions?: ITrialCondition[] | undefined;

  /** Modifiers */
  modifiers?: IModifier[] | undefined;

  /** Show Background */
  showBackground: boolean;
}

/** Represents a new sub-site that will exist as a single page */

export interface IPage extends Entry<IPageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'page';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IPageLinkFields {
  /** Unique Key */
  key: string;

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Text */
  text: string;

  /** Sub Text */
  subText?: string | undefined;

  /** URL */
  url?: string | undefined;

  /** Sub Links */
  subLinks?: IPageLink[] | undefined;

  /** Languages */
  languages: (
    | 'en-US'
    | 'en-GB'
    | 'ja-JP'
    | 'pl-PL'
    | 'es-AR'
    | 'es-MX'
    | 'es-ES'
    | 'es-US'
    | 'de-DE'
    | 'it-IT'
    | 'pt-BR'
    | 'en-CA'
    | 'fr-CA'
    | 'en-AU'
  )[];

  /** Analytics */
  analytics?: Record<string, any> | undefined;

  /** GTM Id */
  gtmId?: string | undefined;
}

/** A link to a main sub-site page */

export interface IPageLink extends Entry<IPageLinkFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'pageLink';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IPageLinkListFields {
  /** Unique Key */
  key: string;

  /** Title */
  title: string;

  /** Sub Title */
  subTitle?: string | undefined;

  /** Links */
  links: IPageLink[];
}

/** The list of sub-site page links */

export interface IPageLinkList extends Entry<IPageLinkListFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'pageLinkList';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IPageMediaFields {
  /** Entry Name */
  entryName: string;

  /** Label */
  label: string;

  /** Title */
  title: string;

  /** Display Media */
  displayMedia: 'Video' | 'KalturaId' | 'YoutubeId';

  /** Video URL */
  videoUrl?: string | undefined;

  /** Kaltura Id */
  kalturaId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;
}

export interface IPageMedia extends Entry<IPageMediaFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'pageMedia';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IPopularityFields {
  /** Title */
  title: string;

  /** Number of views */
  numberOfViews: number;
}

/** This content model will collect data from Analytic events */

export interface IPopularity extends Entry<IPopularityFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'popularity';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IQuestionnaireWidgetFields {
  /** Key */
  key: string;

  /** Summary */
  summary: string;

  /** Content */
  content: string;

  /** Content Mobile */
  contentMobile?: string | undefined;

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Button Text */
  buttonText: string;

  /** hideIfNoTrials */
  hideIfNoTrials?: boolean | undefined;
}

/** Widget to display a card for questionnaire
 */

export interface IQuestionnaireWidget
  extends Entry<IQuestionnaireWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'questionnaireWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IQuizStartWidgetFields {
  /** Heading */
  heading: string;

  /** Description */
  description: string;

  /** Image */
  image: Asset;

  /** Image Alt Text */
  imageAltText?: string | undefined;

  /** Start Button Text */
  startButtonText: string;
}

/** Quiz Widget Start View */

export interface IQuizStartWidget extends Entry<IQuizStartWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'quizStartWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IQuizWidgetFields {
  /** Widget Title */
  widgetTitle: string;

  /** Start Widget */
  startWidget: IQuizStartWidget;

  /** Next Button Text */
  nextButtonText: string;

  /** Back Button Text */
  backButtonText: string;

  /** Questions */
  questions: IQuizWidgetQuestion[];

  /** Submit Text */
  submitText?: string | undefined;

  /** Submit Button Text */
  submitButtonText: string;
}

/** Quiz with dynamic questions and answers */

export interface IQuizWidget extends Entry<IQuizWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'quizWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IQuizWidgetAnswerFields {
  /** Answer */
  answer: string;
}

/** Answer for Quiz Widget Question */

export interface IQuizWidgetAnswer extends Entry<IQuizWidgetAnswerFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'quizWidgetAnswer';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IQuizWidgetQuestionFields {
  /** Question */
  question: string;

  /** Answers */
  answers: IQuizWidgetAnswer[];

  /** Correct Answer */
  correctAnswer: IQuizWidgetAnswer;

  /** Correct Answer Text */
  correctAnswerText?: string | undefined;

  /** Incorrect Answer Text */
  incorrectAnswerText?: string | undefined;
}

/** Questions and answers for Quiz Widget */

export interface IQuizWidgetQuestion extends Entry<IQuizWidgetQuestionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'quizWidgetQuestion';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IResourceFields {
  /** Unique Key */
  key: string;

  /** Heading */
  heading: string;

  /** Body */
  body: string;

  /** Link */
  link?: ILink | undefined;

  /** Image */
  image: Asset;

  /** Alt Text */
  altText?: string | undefined;

  /** Conditions this resource relates to */
  conditions?: ITrialCondition[] | undefined;

  /** Display on LTG */
  display: boolean;
}

/** Resouce card content and links */

export interface IResource extends Entry<IResourceFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'resource';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ISectionFields {
  /** Title */
  title: string;

  /** Nav Title */
  navTitle: string;

  /** Section Id */
  sectionId: string;

  /** Primary Color */
  backgroundColor?: string | undefined;

  /** Widgets */
  widgets: (
    | IAccordionWidget
    | IAlertMeWidget
    | ICardArrangementWidget
    | IImageLinkWidget
    | IImageTileWidget
    | IQuestionnaireWidget
    | ISlidesWidget
    | ITextWidget
    | ITrialsWidget
    | IBmiCalculatorWidget
    | IQuizWidget
    | IHomePageFindWidget
    | IBlockquoteWidget
    | IClinicalTrialEssentialsWidget
    | IFindTrialWidget
    | ITrialConnectWidget
  )[];

  /** Hide Title */
  hideTitle?: boolean | undefined;
}

/** Represents a section on a sub-site with a heading that can appear in the site nav */

export interface ISection extends Entry<ISectionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'section';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ISlideContentFields {
  /** Heading */
  heading: string;

  /** Content */
  content: string;
}

/** Slide Content used by the Slides Widget */

export interface ISlideContent extends Entry<ISlideContentFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'slideContent';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ISlidesWidgetFields {
  /** Heading */
  heading: string;

  /** Slides */
  slides: ISlideContent[];
}

/** Slides Widget for displaying a series of cards that can be cycled through */

export interface ISlidesWidget extends Entry<ISlidesWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'slidesWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IStaticPageFields {
  /** Page content */
  pageContent: Document;

  /** Key */
  key: string;

  /** metadata */
  metadata?: IMetaAndShare | undefined;
}

export interface IStaticPage extends Entry<IStaticPageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'staticPage';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITabContentFields {
  /** Heading */
  heading: string;

  /** Description */
  description: string;

  /** Image */
  image: Asset;

  /** Alt Text */
  altText?: string | undefined;

  /** Button Text */
  buttonText: string;

  /** URL */
  url: string;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';

  /** Hide Button */
  hideButton: boolean;
}

/** Tab Content used by the Tabs Widget */

export interface ITabContent extends Entry<ITabContentFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'tabContent';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITabsWidgetFields {
  /** Key */
  key: string;

  /** Tabs */
  tabs: ITabContent[];
}

/** Widget for displaying a series of Tab Content that can be cycled through */

export interface ITabsWidget extends Entry<ITabsWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'tabsWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITextWidgetFields {
  /** Key */
  key: string;

  /** Text align */
  textAlign?: boolean | undefined;

  /** Text */
  text: string;
}

/** Widget that creates a text block */

export interface ITextWidget extends Entry<ITextWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'textWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITrialFields {
  /** ID */
  id: string;

  /** Display Media */
  displayMedia: 'Image' | 'Video' | 'KalturaId' | 'YoutubeId';

  /** Image */
  image?: Asset | undefined;

  /** Alt Text */
  altText?: string | undefined;

  /** Video URL */
  videoUrl?: string | undefined;

  /** Kaltura id */
  kalturaId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;
}

export interface ITrial extends Entry<ITrialFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'trial';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITrialConditionFields {
  /** Name */
  name: string;

  /** DiseaseId */
  diseaseId?: string | undefined;

  /** SubDiseaseId */
  subDiseaseId?: string | undefined;
}

/** Data of condition */

export interface ITrialCondition extends Entry<ITrialConditionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'trialCondition';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITrialConnectWidgetFields {
  /** Title */
  title: string;

  /** Description */
  description: string;

  /** Image */
  image: Asset;

  /** Alt Text */
  altText: string;

  /** Button Text */
  buttonText: string;

  /** Button Link */
  buttonLink: string;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';
}

export interface ITrialConnectWidget extends Entry<ITrialConnectWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'trialConnectWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITrialsWidgetFields {
  /** Name */
  name: string;

  /** Conditions */
  conditions?: string[] | undefined;
}

/** Widget which queries and displays trials based on the provided conditions */

export interface ITrialsWidget extends Entry<ITrialsWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'trials-widget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export type CONTENT_TYPE =
  | 'aboutBlog'
  | 'accordionWidget'
  | 'alertMeWidget'
  | 'article'
  | 'articleCategory'
  | 'author'
  | 'blockquoteWidget'
  | 'blogSettings'
  | 'bmiCalculatorWidget'
  | 'bmiResultStatus'
  | 'cardArrangementWidget'
  | 'cardWidget'
  | 'clinicalTrialEssential'
  | 'clinicalTrialEssentialsWidget'
  | 'contentTile'
  | 'ctmUtmSources'
  | 'faqPage'
  | 'findTrialWidget'
  | 'headerMenu'
  | 'homePageFindWidget'
  | 'homeResearchAreaContent'
  | 'homeResearchAreas'
  | 'imageAsset'
  | 'imageLinkWidget'
  | 'imageTileWidget'
  | 'kalturaUiConfig'
  | 'link'
  | 'metaAndShare'
  | 'modifier'
  | 'page'
  | 'pageLink'
  | 'pageLinkList'
  | 'pageMedia'
  | 'popularity'
  | 'questionnaireWidget'
  | 'quizStartWidget'
  | 'quizWidget'
  | 'quizWidgetAnswer'
  | 'quizWidgetQuestion'
  | 'resource'
  | 'section'
  | 'slideContent'
  | 'slidesWidget'
  | 'staticPage'
  | 'tabContent'
  | 'tabsWidget'
  | 'textWidget'
  | 'trial'
  | 'trialCondition'
  | 'trialConnectWidget'
  | 'trials-widget';

export type IEntry =
  | IAboutBlog
  | IAccordionWidget
  | IAlertMeWidget
  | IArticle
  | IArticleCategory
  | IAuthor
  | IBlockquoteWidget
  | IBlogSettings
  | IBmiCalculatorWidget
  | IBmiResultStatus
  | ICardArrangementWidget
  | ICardWidget
  | IClinicalTrialEssential
  | IClinicalTrialEssentialsWidget
  | IContentTile
  | ICtmUtmSources
  | IFaqPage
  | IFindTrialWidget
  | IHeaderMenu
  | IHomePageFindWidget
  | IHomeResearchAreaContent
  | IHomeResearchAreas
  | IImageAsset
  | IImageLinkWidget
  | IImageTileWidget
  | IKalturaUiConfig
  | ILink
  | IMetaAndShare
  | IModifier
  | IPage
  | IPageLink
  | IPageLinkList
  | IPageMedia
  | IPopularity
  | IQuestionnaireWidget
  | IQuizStartWidget
  | IQuizWidget
  | IQuizWidgetAnswer
  | IQuizWidgetQuestion
  | IResource
  | ISection
  | ISlideContent
  | ISlidesWidget
  | IStaticPage
  | ITabContent
  | ITabsWidget
  | ITextWidget
  | ITrial
  | ITrialCondition
  | ITrialConnectWidget
  | ITrialsWidget;

export type LOCALE_CODE =
  | 'de-DE'
  | 'en-AU'
  | 'en-CA'
  | 'en-GB'
  | 'en-US'
  | 'es-AR'
  | 'es-ES'
  | 'es-MX'
  | 'es-US'
  | 'fr-CA'
  | 'it-IT'
  | 'ja-JP'
  | 'pl-PL'
  | 'pt-BR';

export type CONTENTFUL_DEFAULT_LOCALE_CODE = 'en-US';
