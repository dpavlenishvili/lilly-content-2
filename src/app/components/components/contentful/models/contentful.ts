// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

import { Asset, Entry } from 'contentful';

export interface IAccordionWidgetFields {
  /** Key */
  key: string;

  /** Title */
  title?: string | undefined;

  /** Content */
  content?: IImageTileWidget[] | undefined;

  /** Body */
  body?: string | undefined;
}

/** Accordion widget to organize content into collapsible sections.   */

export interface IAccordionWidget extends Entry<IAccordionWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'accordionWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IArticleFields {
  /** Label */
  label: string;

  /** Title */
  title: string;

  /** Image */
  image: Asset;

  /** Alt Text */
  altText: string;

  /** Categories */
  categories?: ('category1' | 'category2')[] | undefined;

  /** URL */
  url: string;
}

/** Each entry includes a title, label, image, and descriptive body text, along with optional tags for categorization or filtering. */

export interface IArticle extends Entry<IArticleFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'article';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IArticlesBlockFields {
  /** Label */
  label: string;

  /** Heading */
  heading: string;

  /** Top Button */
  topButton?: IButton | undefined;

  /** Articles List */
  articlesList: IArticle[];

  /** Bottom Button */
  bottomButton: IButton;
}

/** Use this model to display a list of articles on Modules Page. It defines the overall block structure â€” including a top section with heading and button, a middle section listing articles (referencing shared Article entries), and bottom call-to-action button. */

export interface IArticlesBlock extends Entry<IArticlesBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'articlesBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IBenefitsBlockFields {
  /** Label */
  label: string;

  /** Title */
  title: string;

  /** Body Text */
  bodyText: string;

  /** Button */
  button?: IButton | undefined;

  /** File */
  file?: Asset | undefined;
}

/** Includes label, title, body text and button */

export interface IBenefitsBlock extends Entry<IBenefitsBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'benefitsBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IButtonFields {
  /** Text */
  text: string;

  /** Link */
  link: string;

  /** Link Behavior */
  linkBehavior?:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration'
    | undefined;
}

/** Button with text, link and link behavior */

export interface IButton extends Entry<IButtonFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'button';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ICardFields {
  /** Title */
  title: string;

  /** Body Text */
  bodyText: string;

  /** Button */
  button?: IButton | undefined;
}

/** Part of layout that includes icon, title, body text, action button etc... */

export interface ICard extends Entry<ICardFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'card';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IDayProgramFields {
  /** Tab Name */
  tabName: string;

  /** Label */
  label: string;

  /** Heading */
  heading: string;

  /** Body Text */
  bodyText: string;

  /** Action Icons */
  actionIcons?: IIcon[] | undefined;

  /** Microsteps Block */
  microstepsBlock?: IMicrostepsBlock | undefined;

  /** Image Cover Block */
  imageCoverBlock?: IImageCoverBlock | undefined;

  /** Benefits Block */
  benefitsBlock: IBenefitsBlock;
}

/** includes content per day */

export interface IDayProgram extends Entry<IDayProgramFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'dayProgram';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IFooterFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Logo Image */
  logoImage: Asset;

  /** Logo Link */
  logoLink?: ILink | undefined;

  /** Logo Image Alt */
  logoImageAlt: string;

  /** Contact Section Title */
  contactSectionTitle: string;

  /** Navigation Links */
  navigationLinks: ILink[];

  /** Customer Support Content */
  customerSupportContent: string;

  /** Privacy Section Title */
  privacySectionTitle: string;

  /** Privacy Links */
  privacyLinks: ILink[];

  /** Social Section Title */
  socialSectionTitle: string;

  /** Social Links */
  socialLinks: ILink[];
}

/** Footer content */

export interface IFooter extends Entry<IFooterFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'footer';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHeroSectionFields {
  /** Entry Name */
  entryName: string;

  /** Headline */
  headline: string;

  /** Subheadline */
  subheadline: string;

  /** Background image */
  backgroundImage: Asset;

  /** Alt text */
  altText: string;

  /** Scroll label */
  scrollLabel?: string | undefined;

  /** Card */
  card?: ICard | undefined;
}

/** Top banner with headline, subheadline, background image */

export interface IHeroSection extends Entry<IHeroSectionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'heroSection';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IHomePageFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Hero section */
  heroSection: IHeroSection;

  /** Metadata */
  metadata: IMetaAndShare;

  /** Sections */
  sections: ISection[];
}

/** Main page that defines the title, slug, metadata, sections and etc... Sections are ordered to build the page layout. */

export interface IHomePage extends Entry<IHomePageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'homePage';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IIconFields {
  /** Alt Text */
  altText: string;

  /** Icon */
  icon: Asset;

  /** Type */
  type: string;
}

/** Includes Icon and Alt Text */

export interface IIcon extends Entry<IIconFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'icon';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IImageCoverBlockFields {
  /** Label */
  label: string;

  /** Heading */
  heading: string;

  /** Background */
  background: Asset;

  /** Alt Text */
  altText: string;
}

/** Includes label, heading and  image as a background */

export interface IImageCoverBlock extends Entry<IImageCoverBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'imageCoverBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IImageTileWidgetFields {
  /** Heading */
  heading: string;

  /** Hide Heading */
  hideHeading?: boolean | undefined;

  /** Description */
  description: string;

  /** Image */
  image: Asset;

  /** Image Position */
  imagePosition?: 'left' | 'right' | undefined;

  /** Alt Text */
  altText: string;

  /** Button Text */
  buttonText?: string | undefined;

  /** Button Link */
  buttonLink?: string | undefined;

  /** Link Behavior */
  linkBehavior?:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration'
    | undefined;

  /** Hide Button */
  hideButton?: boolean | undefined;
}

/** Widget that displays an image with a title, description, and link. Successive uses of this widget start with the image on the left for the first widget and then alternate layout orientations. */

export interface IImageTileWidget extends Entry<IImageTileWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'imageTileWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IKalturaUiConfigFields {
  /** Entry Name */
  entryName: string;

  /** Id */
  id: string;
}

export interface IKalturaUiConfig extends Entry<IKalturaUiConfigFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'kalturaUiConfig';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ILinkFields {
  /** Entry Name */
  entryName: string;

  /** Display Text */
  displayText: string;

  /** URL */
  url: string;

  /** Link Behavior */
  linkBehavior:
    | 'sameTab'
    | 'newTab'
    | 'interstitial'
    | 'interstitialCollaboration';

  /** Icon */
  icon?: Asset | undefined;

  /** Icon Alt */
  iconAlt?: string | undefined;
}

export interface ILink extends Entry<ILinkFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'link';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IMetaAndShareFields {
  /** Entry Name */
  entryName: string;

  /** Meta Title */
  metaTitle: string;

  /** Meta Description */
  metaDescription?: string | undefined;

  /** Meta Keywords */
  metaKeywords?: string[] | undefined;

  /** OG Image */
  ogImage?: Asset | undefined;
}

/** Metadata and Share content at the page level */

export interface IMetaAndShare extends Entry<IMetaAndShareFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'metaAndShare';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IMicrostepCardFields {
  /** Label */
  label?: string | undefined;

  /** Title */
  title: string;

  /** Body Text */
  bodyText: string;
}

/** Each card contains a label, short title and description to encourage simple, healthy habits. */

export interface IMicrostepCard extends Entry<IMicrostepCardFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'microstepCard';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IMicrostepsBlockFields {
  /** Label */
  label: string;

  /** Microsteps Card */
  microstepsCard?: IMicrostepCard[] | undefined;

  /** Button */
  button?: IButton | undefined;
}

/** Block Contains label, cards and the button */

export interface IMicrostepsBlock extends Entry<IMicrostepsBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'microstepsBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IModuleFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Title */
  title: string;

  /** Introduction */
  introduction: IImageTileWidget;

  /** Week Planner Navigation */
  weekPlannerNavigation?: IWeekPlannerNavigation | undefined;

  /** Video Carousel Block */
  videoCarouselBlock?: IVideoCarouselBlock | undefined;

  /** Articles Block */
  articlesBlock: Entry<{ [fieldId: string]: unknown }>;
}

/** Content displayed for each module */

export interface IModule extends Entry<IModuleFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'module';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IModulesNavigationBarFields {
  /** Key */
  key: string;

  /** Menu */
  menu: IModule[];

  /** Mobile Dropdown Label */
  mobileDropdownLabel?: string | undefined;
}

export interface IModulesNavigationBar
  extends Entry<IModulesNavigationBarFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'modulesNavigationBar';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IModulesPageFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Hero section */
  heroSection: IHeroSection;

  /** Metadata */
  metadata: IMetaAndShare;

  /** Modules Navigation */
  modulesNavigation: IModulesNavigationBar;

  /** Save Later Block */
  saveLaterBlock: ISaveLaterBlock;
}

/** Container Page for multiple wellness modules with tabbed navigation. */

export interface IModulesPage extends Entry<IModulesPageFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'modulesPage';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IOptionFields {
  /** Title */
  title: string;

  /** Description */
  description: string;

  /** Icon */
  icon: Asset;

  /** Alt Text */
  altText: string;
}

/** Includes icon, title and description */

export interface IOption extends Entry<IOptionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'option';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ISaveLaterBlockFields {
  /** Heading */
  heading: string;

  /** Button */
  button: IButton;

  /** Options */
  options: IOption[];

  /** File */
  file: Asset;
}

/** Includes a call-to-action and a list of options, each with an icon, title, and description. */

export interface ISaveLaterBlock extends Entry<ISaveLaterBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'saveLaterBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ISectionFields {
  /** Title */
  title?: string | undefined;

  /** Label */
  label?: string | undefined;

  /** Section Id */
  sectionId: string;

  /** Widgets */
  widgets: (
    | IImageTileWidget
    | ITextWidget
    | IAccordionWidget
    | IModulesNavigationBar
  )[];

  /** Hide Title */
  hideTitle?: boolean | undefined;
}

/** Represents a section block on a page */

export interface ISection extends Entry<ISectionFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'section';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface ITextWidgetFields {
  /** Key */
  key: string;

  /** Text align */
  textAlign: boolean;

  /** Text */
  text: string;
}

/** Widget that creates a text block */

export interface ITextWidget extends Entry<ITextWidgetFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'textWidget';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IVideoCardFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Title */
  title: string;

  /** Category Label */
  categoryLabel: string;

  /** Thumbnail */
  thumbnail: Asset;

  /** Video */
  video?: IVideoMediaConfig | undefined;

  /** Icon */
  icon?: Asset | undefined;

  /** Filter Tag */
  filterTag: 'all' | 'short-form' | 'recipe' | 'food-reset';
}

/** Individual video card */

export interface IVideoCard extends Entry<IVideoCardFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'videoCard';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IVideoCarouselBlockFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Label */
  label?: string | undefined;

  /** Title */
  title: string;

  /** Subtitle */
  subtitle?: string | undefined;

  /** Category Tabs */
  categoryTabs: IVideoCategoryTab[];

  /** Category Mobile Dropdown Label */
  categoryMobileDropdownLabel?: string | undefined;

  /** CTA Button */
  ctaButton?: IButton | undefined;

  /** Video Cards */
  videoCards: IVideoCard[];

  /** Max Visible Cards */
  maxVisibleCards?: number | undefined;

  /** View All Button */
  viewAllButton?: IButton | undefined;
}

/** Video carousel block with filtering tabs */

export interface IVideoCarouselBlock extends Entry<IVideoCarouselBlockFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'videoCarouselBlock';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IVideoCategoryTabFields {
  /** Entry Name */
  entryName: string;

  /** Key */
  key: string;

  /** Label */
  label: string;

  /** Filter Value */
  filterValue: 'all' | 'short-form' | 'recipe' | 'food-reset';
}

/** Category tab for filtering videos */

export interface IVideoCategoryTab extends Entry<IVideoCategoryTabFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'videoCategoryTab';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IVideoMediaConfigFields {
  /** Display Media */
  displayMedia: 'Image' | 'Video' | 'KalturaId' | 'YoutubeId';

  /** Video URL */
  videoUrl?: string | undefined;

  /** Kaltura Id */
  kalturaId?: string | undefined;

  /** Kaltura UI Config */
  kalturaUiConfig?: IKalturaUiConfig | undefined;

  /** Youtube Id */
  youtubeId?: string | undefined;

  /** Video Config */
  videoConfig?: Record<string, any> | undefined;
}

export interface IVideoMediaConfig extends Entry<IVideoMediaConfigFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'videoMediaConfig';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export interface IWeekPlannerNavigationFields {
  /** Key */
  key: string;

  /** Label */
  label: string;

  /** Days */
  days: IDayProgram[];

  /** Mobile Dropdown Label */
  mobileDropdownLabel: string;
}

/** tabbed day navigation */

export interface IWeekPlannerNavigation
  extends Entry<IWeekPlannerNavigationFields> {
  sys: {
    id: string;
    type: string;
    createdAt: string;
    updatedAt: string;
    locale: string;
    contentType: {
      sys: {
        id: 'weekPlannerNavigation';
        linkType: 'ContentType';
        type: 'Link';
      };
    };
  };
}

export type CONTENT_TYPE =
  | 'accordionWidget'
  | 'article'
  | 'articlesBlock'
  | 'benefitsBlock'
  | 'button'
  | 'card'
  | 'dayProgram'
  | 'footer'
  | 'heroSection'
  | 'homePage'
  | 'icon'
  | 'imageCoverBlock'
  | 'imageTileWidget'
  | 'kalturaUiConfig'
  | 'link'
  | 'metaAndShare'
  | 'microstepCard'
  | 'microstepsBlock'
  | 'module'
  | 'modulesNavigationBar'
  | 'modulesPage'
  | 'option'
  | 'saveLaterBlock'
  | 'section'
  | 'textWidget'
  | 'videoCard'
  | 'videoCarouselBlock'
  | 'videoCategoryTab'
  | 'videoMediaConfig'
  | 'weekPlannerNavigation';

export type IEntry =
  | IAccordionWidget
  | IArticle
  | IArticlesBlock
  | IBenefitsBlock
  | IButton
  | ICard
  | IDayProgram
  | IFooter
  | IHeroSection
  | IHomePage
  | IIcon
  | IImageCoverBlock
  | IImageTileWidget
  | IKalturaUiConfig
  | ILink
  | IMetaAndShare
  | IMicrostepCard
  | IMicrostepsBlock
  | IModule
  | IModulesNavigationBar
  | IModulesPage
  | IOption
  | ISaveLaterBlock
  | ISection
  | ITextWidget
  | IVideoCard
  | IVideoCarouselBlock
  | IVideoCategoryTab
  | IVideoMediaConfig
  | IWeekPlannerNavigation;

export type LOCALE_CODE = 'en-US' | 'es-US';

export type CONTENTFUL_DEFAULT_LOCALE_CODE = 'en-US';
